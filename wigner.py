import numpy as np
import matplotlib

import matplotlib.pyplot as plt


def sample_matrix(N=50, num_samples=1000, tau=0.5):
    """
    Generate a random asymmetric matrix with N rows and num_samples columns.
    The matrix is generated by sampling from a Gaussian distribution.
    The correlation between J_ij and J_ji is tau.
    """
    # generate a random matrix
    A = np.random.randn(N, N, num_samples)
    At = np.transpose(A, (1, 0, 2))

    a = np.sqrt((1 + tau))
    b = np.sqrt((1 - tau))

    alpha = 0.5 * (a + b)
    beta = 0.5 * (a - b)

    J = alpha * A + beta * At

    # resample the diagonal elements
    J[np.diag_indices(N)] = np.random.randn(N, num_samples)

    # verify statistics

    Jt = np.transpose(J, (1, 0, 2))
    means = np.mean(J, axis=2)
    stds = np.mean(J * J, axis=2)
    corrs = np.mean(J * Jt, axis=2)
    expected = tau + np.eye(N) * (1 - tau)

    tol = 10 * np.sqrt(1 / num_samples)

    mean_diff = np.max(np.abs(means))
    std_diff = np.max(np.abs(stds - 1))
    corr_diff = np.max(np.abs(corrs - expected))

    print(
        f"mean_diff={mean_diff:.2e}, std_diff={std_diff:.2e}, "
        + f"corr_diff={corr_diff:.2e}, tol={tol:.2e}"
    )

    return J, mean_diff, std_diff, corr_diff, tol


if __name__ == "__main__":
    matplotlib.use("module://matplotlib-backend-sixel")
    # make default font size larger
    plt.rcParams.update({"font.size": 32})

    # make default line width larger
    plt.rcParams.update({"axes.linewidth": 4})
    plt.rcParams.update({"lines.linewidth": 4})
    plt.rcParams.update({"grid.linewidth": 4})

    # make default figure size larger
    plt.rcParams.update({"figure.figsize": (10, 8)})

    # make default markers larger
    plt.rcParams.update({"lines.markersize": 20})

    mean_diffs = []
    std_diffs = []
    corr_diffs = []
    tols = []

    N = 50
    tau = 0.5
    num_samples = np.logspace(1, 4, 10).astype(int)
    for num_sample in num_samples:
        print(f"Checking num_samples={num_sample}")
        J, mean_diff, std_diff, corr_diff, tol = sample_matrix(
            num_samples=num_sample,
            N=N,
            tau=tau,
        )
        mean_diffs.append(mean_diff)
        std_diffs.append(std_diff)
        corr_diffs.append(corr_diff)
        tols.append(tol)

    plt.figure()
    plt.grid()
    plt.plot(num_samples, mean_diffs, "o-", label="mean")
    plt.plot(num_samples, std_diffs, "o-", label="std")
    plt.plot(num_samples, corr_diffs, "o-", label="corr")
    plt.plot(num_samples, tols, "o-", label="c/sqrt(num_samples)")
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("num_samples")
    plt.ylabel("max difference")
    plt.title(f"N={N}, tau={tau}")
    # plot legend outside of the plot
    plt.legend(loc="center left", bbox_to_anchor=(1, 0.5))
    plt.show()
